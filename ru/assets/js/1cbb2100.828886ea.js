"use strict";(self.webpackChunkinnercore_docs=self.webpackChunkinnercore_docs||[]).push([[75134],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>u});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function d(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),o=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=o(t.components);return n.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,m=d(t,["components","mdxType","originalType","parentName"]),k=o(a),u=r,N=k["".concat(p,".").concat(u)]||k[u]||s[u]||l;return a?n.createElement(N,i(i({ref:e},m),{},{components:a})):n.createElement(N,i({ref:e},m))}));function u(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var d={};for(var p in e)hasOwnProperty.call(e,p)&&(d[p]=e[p]);d.originalType=t,d.mdxType="string"==typeof t?t:r,i[1]=d;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},55398:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>k,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var n=a(87462),r=(a(67294),a(3905)),l=a(95999);const i={displayed_sidebar:"defaultSidebar",title:"API",sidebar_label:"API",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},d=void 0,p={unversionedId:"index",id:"index",title:"API",description:"",source:"@site/api/www/index.mdx",sourceDirName:".",slug:"/",permalink:"/ru/api/",draft:!1,tags:[],version:"current",frontMatter:{displayed_sidebar:"defaultSidebar",title:"API",sidebar_label:"API",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},sidebar:"defaultSidebar"},o={},m=[],s={toc:m};function k(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,(0,r.kt)(l.Z,{id:"api.heading.entryPoint",mdxType:"Translate"},"API Reference")),(0,r.kt)("p",null,"Core Engine is the most fashion Minecraft: Bedrock Edition engine determined to make game modded with minimum tons of code."),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.namespaces",mdxType:"Translate"},"Namespaces")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.namespace",mdxType:"Translate"},"Namespace")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ActorRenderer"},"ActorRenderer")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/AddonEntityRegistry"},"AddonEntityRegistry")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to manage custom entities added via add-ons.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Animation"},"Animation")),(0,r.kt)("td",{parentName:"tr",align:null},"Animations are used to display some 3d models in the world without use of entities.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Armor"},"Armor")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to manage armor's behavior.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block"},"Block")),(0,r.kt)("td",{parentName:"tr",align:null},'Module used to create and manipulate blocks. The difference between terms "block" and "tile" is in it\'s usage: blocks are used in the inventory, tiles are placed in the world and have different IDs for some vanilla blocks. Use ',(0,r.kt)("a",{parentName:"td",href:"/api/Block/convertBlockToItemId"},"Block.convertBlockToItemId()")," and ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/convertItemToBlockId"},"Block.convertItemToBlockId()")," to perform conversion between block and it item variation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/BlockRenderer"},"BlockRenderer")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to create blocks with any custom model.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Callback"},"Callback")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to handle callbacks. Investigate details about the callback mechanism and the list of pre-defined callbacks.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/com"},"com")),(0,r.kt)("td",{parentName:"tr",align:null},"Core Engine is the most fashion Minecraft: Bedrock Edition engine determined to make game modded with minimum tons of code.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Commands"},"Commands")),(0,r.kt)("td",{parentName:"tr",align:null},"Namespace used to manipulate minecraft commands.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Config"},"Config")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/CustomEnchant"},"CustomEnchant")),(0,r.kt)("td",{parentName:"tr",align:null},"Module to create custom enchantments.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Debug"},"Debug")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines some useful methods for debugging.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Dimensions"},"Dimensions")),(0,r.kt)("td",{parentName:"tr",align:null},"Namespace used to create and manipulate custom dimensions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Entity"},"Entity")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to manipulate entities (mobs, drop, arrows, etc.) in the world. Every entity has it's unique numeric ID which is often used across this module as the first function parameter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EntityAI"},"EntityAI")),(0,r.kt)("td",{parentName:"tr",align:null},"A set of predefined entity AI types.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EntityAIClass"},"EntityAIClass")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/FileTools"},"FileTools")),(0,r.kt)("td",{parentName:"tr",align:null},"Module that provides methods to work with file system.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Game"},"Game")),(0,r.kt)("td",{parentName:"tr",align:null},"Module that provides some general game-related functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/GameObjectRegistry"},"GameObjectRegistry")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/GenerationUtils"},"GenerationUtils")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to simplify generation tasks in mods logic.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ICRender"},"ICRender")),(0,r.kt)("td",{parentName:"tr",align:null},"Class used to define block models that depend on surrounding blocks. Some examples of such blocks are wires, pipes, block structure parts, etc.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/IDRegistry"},"IDRegistry")),(0,r.kt)("td",{parentName:"tr",align:null},'Module used to manage item and block IDs. Items and blocks have the same underlying nature, so their IDs are interchangeable. Though, the blocks are defined "twice", as an item (in player\'s hand or inventory) and as a tile (a block placed in the world).')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Item"},"Item")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to define items and their properties.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ItemModel"},"ItemModel")),(0,r.kt)("td",{parentName:"tr",align:null},"Namespace used to change item models in player's hand and/or inventory. By default, if the block has an ",(0,r.kt)("a",{parentName:"td",href:"/api/ICRender"},"ICRender"),", it is automatically applied as item's model.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/LiquidRegistry"},"LiquidRegistry")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Logger"},"Logger")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to log messages to Inner Core and internal log.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/MobRegistry"},"MobRegistry")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/MobSpawnRegistry"},"MobSpawnRegistry")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Mod"},"Mod")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI"},"ModAPI")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to share mods' APIs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModPack"},"ModPack")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Native"},"Native")),(0,r.kt)("td",{parentName:"tr",align:null},"Module containing enums that can make user code more readable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/NBT"},"NBT")),(0,r.kt)("td",{parentName:"tr",align:null},"NBT (Named Binary Tag) is a tag based binary format designed to carry large amounts of binary data with smaller amounts of additional data. You can get or set nbt tags of ",(0,r.kt)("a",{parentName:"td",href:"/api/Entity"},"entities"),", ",(0,r.kt)("a",{parentName:"td",href:"/api/NativeTileEntity"},"native tile entities, such as chests or beacons")," and ",(0,r.kt)("a",{parentName:"td",href:"/api/ItemExtraData"},"items"),". To get more information about these data structures, see .")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Network"},"Network")),(0,r.kt)("td",{parentName:"tr",align:null},"Working with client and server packets in multiplayer and also determine stuff.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Particles"},"Particles")),(0,r.kt)("td",{parentName:"tr",align:null},"Module to work with vanilla and custom particles.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Player"},"Player")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to manipulate player. Player is also an entity in Minecraft, so you can use all the functions from ",(0,r.kt)("a",{parentName:"td",href:"/api/Entity"},"Entity")," module as well. To get player's entity ID, call ",(0,r.kt)("a",{parentName:"td",href:"/api/Player/get"},"Player.get()")," function.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Recipes"},"Recipes")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to manipulate crafting recipes for vanilla and custom workbenches.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Render"},"Render")),(0,r.kt)("td",{parentName:"tr",align:null},"We're meant native renderer, it's not connected with same class here.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/RenderMesh"},"RenderMesh")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Resources"},"Resources")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Saver"},"Saver")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to save data between world sessions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Threading"},"Threading")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to create and manipulate threads. Threads let you execute time-consuming tasks without blocking current execution thread.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/TileEntity"},"TileEntity")),(0,r.kt)("td",{parentName:"tr",align:null},"TileEntity is a powerful mechanism that allows for creation of interactive blocks such as chests, furnaces, etc.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ToolAPI"},"ToolAPI")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to manage block and tools material and create tools with all required properties.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Translation"},"Translation")),(0,r.kt)("td",{parentName:"tr",align:null},"Module that can be used to localize mods All default strings (e.g. item names, windows titles, etc.) in the mod should be in English. Add translations to these strings using ",(0,r.kt)("a",{parentName:"td",href:"/api/Translation/addTranslation"},"Translation.addTranslation()"),". For items and blocks translations are applied automatically. For the other strings, use ",(0,r.kt)("a",{parentName:"td",href:"/api/Translation/translate"},"Translation.translate()"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/UI"},"UI")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Updatable"},"Updatable")),(0,r.kt)("td",{parentName:"tr",align:null},"Module used to create and manage Updatables. Updatables provide the proper way to manage objects that update their state every tick. Updatables may not be notified every tick, if there are too many, to avoid user interface freezes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/World"},"World")),(0,r.kt)("td",{parentName:"tr",align:null},"Module that allows to work with current Minecraft world. Most of the methods are client, use BlockSource instead.")))),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.classes",mdxType:"Translate"},"Classes")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.class",mdxType:"Translate"},"Class")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ActorRenderer"},"ActorRenderer")),(0,r.kt)("td",{parentName:"tr",align:null},"Class, upon which armor and attachments render is based It is a model that consists of parts, same as in , but more abstract, allows creating root parts instead of inheritance from old humanoid model.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/AttachableRender"},"AttachableRender")),(0,r.kt)("td",{parentName:"tr",align:null},"Class used to attach attachables to entities.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/BlockSource"},"BlockSource")),(0,r.kt)("td",{parentName:"tr",align:null},"New class to work with world instead of some methods from ",(0,r.kt)("a",{parentName:"td",href:"/api/World"},"World")," module.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/BlockState"},"BlockState")),(0,r.kt)("td",{parentName:"tr",align:null},"Class to work with vanilla blocks parameters.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Config"},"Config")),(0,r.kt)("td",{parentName:"tr",align:null},"Json configuration file reading/writing utility.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/CustomBiome"},"CustomBiome")),(0,r.kt)("td",{parentName:"tr",align:null},"Class used to create custom biomes. Note that Minecraft has a limit of 256 biomes and there are already more than 100 vanilla biomes, so do not overuse this functionality.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/CustomEntity"},"CustomEntity")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EntityAIClass"},"EntityAIClass")),(0,r.kt)("td",{parentName:"tr",align:null},"Class used to create new entity AI types.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EntityAIWatcher"},"EntityAIWatcher")),(0,r.kt)("td",{parentName:"tr",align:null},"Parent class for ",(0,r.kt)("a",{parentName:"td",href:"/api/EntityAI/PanicWatcher"},"EntityAI.PanicWatcher"),", does nothing like ",(0,r.kt)("a",{parentName:"td",href:"/api/EntityAI/Idle"},"EntityAI.Idle"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EntityModel"},"EntityModel")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EntityModelWatcher"},"EntityModelWatcher")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/GameObject"},"GameObject")),(0,r.kt)("td",{parentName:"tr",align:null},"Class used to create and manipulate game objects. Game objects are  that are being saved between game launches.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ItemContainer"},"ItemContainer")),(0,r.kt)("td",{parentName:"tr",align:null},"Type of TileEntity container that supports multiplayer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ItemContainerSlot"},"ItemContainerSlot")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ItemExtraData"},"ItemExtraData")),(0,r.kt)("td",{parentName:"tr",align:null},"Class representing item extra data. Used to store additional information about item other then just item ID and data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/NetworkClient"},"NetworkClient")),(0,r.kt)("td",{parentName:"tr",align:null},"Class that represents network client.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/NetworkConnectedClientList"},"NetworkConnectedClientList")),(0,r.kt)("td",{parentName:"tr",align:null},"Class to work with definite couple of clients, bound by certain conditions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/NetworkEntity"},"NetworkEntity")),(0,r.kt)("td",{parentName:"tr",align:null},"Class that represents network entity of the block, currently is not learned.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/NetworkEntityType"},"NetworkEntityType")),(0,r.kt)("td",{parentName:"tr",align:null},"Class that represents network entity type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/PlayerActor"},"PlayerActor")),(0,r.kt)("td",{parentName:"tr",align:null},"Class to manipulate with separate players.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Render"},"Render")),(0,r.kt)("td",{parentName:"tr",align:null},"Class that is used to give mobs, animations and blocks custom shape.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/RenderMesh"},"RenderMesh")),(0,r.kt)("td",{parentName:"tr",align:null},"Class representing a set of vertices with some other parameters required to display them correctly. Used as block, entity and item models, in animations and actually anywhere you need some physical shape.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ShaderUniformSet"},"ShaderUniformSet")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/SyncedNetworkData"},"SyncedNetworkData")),(0,r.kt)("td",{parentName:"tr",align:null},"Class to work with values, synchronized between server and all clients.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Texture"},"Texture")),(0,r.kt)("td",{parentName:"tr",align:null},"Class representing texture that can be animated.")))),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.enumerations",mdxType:"Translate"},"Enumerations")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.enumeration",mdxType:"Translate"},"Enumeration")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EArmorType"},"EArmorType")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines armor type and armor slot index in player's inventory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EBlockRenderLayer"},"EBlockRenderLayer")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines possible render layers (display methods) for blocks.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EBlockSide"},"EBlockSide")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines numeric representation for each block side.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EBlockStates"},"EBlockStates")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines numeric representation for each vanilla block state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EColor"},"EColor")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines text colors and font styles for chat and tip messages.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EDimension"},"EDimension")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines numeric representation for three vanilla dimensions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EEnchantment"},"EEnchantment")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines numeric IDs of all vanilla enchantments.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EEnchantType"},"EEnchantType")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines what enchantments can or cannot be applied to every instrument type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EEntityType"},"EEntityType")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines all vanilla entity type numeric IDs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EGameDifficulty"},"EGameDifficulty")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines possible game difficulties.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EGameMode"},"EGameMode")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines possible game modes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EItemAnimation"},"EItemAnimation")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines item animation types.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EItemCategory"},"EItemCategory")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines vanilla item categories in creative inventory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EMobRenderType"},"EMobRenderType")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines vanilla mob render types.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ENbtDataType"},"ENbtDataType")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines numeric representation for each NBT data type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EParticleType"},"EParticleType")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines all existing vanilla particles.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EPlayerAbility"},"EPlayerAbility")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines player's abilities.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EPotionEffect"},"EPotionEffect")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines vanilla potion effects.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ETileEntityType"},"ETileEntityType")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines numeric representation for vanilla TileEntity types. Use ",(0,r.kt)("a",{parentName:"td",href:"/api/NativeTileEntity"},"NativeTileEntity")," class to work with them.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/VanillaBlockID"},"VanillaBlockID")),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric IDs of vanilla blocks in the inventory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/VanillaItemID"},"VanillaItemID")),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric IDs of vanilla items.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/VanillaTileID"},"VanillaTileID")),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric IDs of vanilla blocks placed in the world.")))),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.variables",mdxType:"Translate"},"Variables")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.variable",mdxType:"Translate"},"Variable")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/__config__"},"_","_","config","_","_")),(0,r.kt)("td",{parentName:"tr",align:null},"Main mod configuration manager, settings are stored in ","*","config.json","*"," file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/__dir__"},"_","_","dir","_","_")),(0,r.kt)("td",{parentName:"tr",align:null},'Full path to the mod\'s directory, ends with "/".')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/__mod__"},"_","_","mod","_","_")),(0,r.kt)("td",{parentName:"tr",align:null},"Mostly internal variable determined to be useful for control mod lifecycle, configuration and executables.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/__modpack__"},"_","_","modpack","_","_")),(0,r.kt)("td",{parentName:"tr",align:null},"Full path to current modpack (like ","*","innercore","*",") directory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/__name__"},"_","_","name","_","_")),(0,r.kt)("td",{parentName:"tr",align:null},"Name property, generally loaded from ","*","mod.info","*",".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/__packdir__"},"_","_","packdir","_","_")),(0,r.kt)("td",{parentName:"tr",align:null},"Full path to current selected pack (like Inner Core) directory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/BlockID"},"BlockID")),(0,r.kt)("td",{parentName:"tr",align:null},"Object containing custom block string IDs as keys and their numeric IDs as values.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ItemID"},"ItemID")),(0,r.kt)("td",{parentName:"tr",align:null},"Object containing custom item string IDs as keys and their numeric IDs as values.")))),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.functions",mdxType:"Translate"},"Functions")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.function",mdxType:"Translate"},"Function")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/alert"},"alert(arg)")),(0,r.kt)("td",{parentName:"tr",align:null},"Displays android.widget.Toast with specified message. If this function is called more then once, messages are stacked and displayed together.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ConfigureMultiplayer"},"ConfigureMultiplayer(args)")),(0,r.kt)("td",{parentName:"tr",align:null},"Function that must be written in launcher.js to enable multiplayer configuration. Client mods must not affect on the world. They will not be taken into account in mod synchronization during the connection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/EXPORT"},"EXPORT(name, lib)")),(0,r.kt)("td",{parentName:"tr",align:null},"Exports object from library using specified name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/getCoreAPILevel"},"getCoreAPILevel()")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/getMCPEVersion"},"getMCPEVersion()")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/IMPORT_NATIVE"},"IMPORT","_","NATIVE(name, target)")),(0,r.kt)("td",{parentName:"tr",align:null},"Injects methods from C++ into the target object to use in the mod.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/IMPORT"},"IMPORT(name, value)")),(0,r.kt)("td",{parentName:"tr",align:null},"Imports library dependency. Libraries should be stored in the ","*",'"libraryDir"',"*"," directory, specified in your ","*","build.config","*",". You can either import the whole library or single function/value using value parameter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/importLib"},"importLib(name, value)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/IMPORT"},"IMPORT()"),", consider using ",(0,r.kt)("a",{parentName:"td",href:"/api/IMPORT"},"IMPORT()")," instead.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/LIBRARY"},"LIBRARY(description)")),(0,r.kt)("td",{parentName:"tr",align:null},"Library declaration, specifies all the information about library it is called from. Cannot be called from user code.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/runCustomSource"},"runCustomSource(name, scope)")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs custom source in the specified context by it's name. Define custom sources using ","*",'"sourceType": "custom"',"*"," for the source in your ","*","build.config","*",".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/runOnClientThread"},"runOnClientThread(func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs specified function in the client thread. Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/runOnMainThread"},"runOnMainThread()"),", but for the client side.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/runOnMainThread"},"runOnMainThread(func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs specified function in the main thread.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/WRAP_JAVA"},"WRAP","_","JAVA(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows to create new JS modules imported from Java code and use it in the mod.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/WRAP_NATIVE"},"WRAP","_","NATIVE(name)")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows to create new JS modules imported from C++ code and use it in the mod.")))),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.interfaces",mdxType:"Translate"},"Interfaces")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.interface",mdxType:"Translate"},"Interface")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/BlockPosition"},"BlockPosition")),(0,r.kt)("td",{parentName:"tr",align:null},"Object representing coordinate set with side data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Color"},"Color")),(0,r.kt)("td",{parentName:"tr",align:null},"Object representing RGB color.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/GameObjectPrototype"},"GameObjectPrototype")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ItemInstance"},"ItemInstance")),(0,r.kt)("td",{parentName:"tr",align:null},"Object representing item instance in the inventory.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ItemModel"},"ItemModel")),(0,r.kt)("td",{parentName:"tr",align:null},"Class representing item model in player's hand and/or inventory. To get an instance of this class from your code, use  static function.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/LookAngle"},"LookAngle")),(0,r.kt)("td",{parentName:"tr",align:null},"Object representing pitch/yaw angle set (in radians).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/NativeTileEntity"},"NativeTileEntity")),(0,r.kt)("td",{parentName:"tr",align:null},"Interface providing access to native tile entities - chests, hoppers, furnaces, smelters, etc. See full lists of supported native tile entities in the ",(0,r.kt)("a",{parentName:"td",href:"/api/ETileEntityType"},"ETileEntityType")," enum.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Tile"},"Tile")),(0,r.kt)("td",{parentName:"tr",align:null},"Object representing block in the world.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/TileEntity"},"TileEntity")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Updatable"},"Updatable")),(0,r.kt)("td",{parentName:"tr",align:null},"Updatable is an object that is notified every tick via it's  method call.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Vector"},"Vector")),(0,r.kt)("td",{parentName:"tr",align:null},"Object representing the set of coordinates in the three-dimensional world.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Weather"},"Weather")),(0,r.kt)("td",{parentName:"tr",align:null},"Object representing current weather in the world.")))),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.typeAliases",mdxType:"Translate"},"Type Aliases")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.typeAlias",mdxType:"Translate"},"Type Alias")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ArmorType"},"ArmorType")),(0,r.kt)("td",{parentName:"tr",align:null},"String types of armor to be specified when calling ",(0,r.kt)("a",{parentName:"td",href:"/api/Item/createArmorItem"},"Item.createArmorItem()"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/DefaultRenderTemplate"},"DefaultRenderTemplate")),(0,r.kt)("td",{parentName:"tr",align:null},"Default render templates used inside of Inner Core, currently there are only default armor models.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ItemInstanceArray"},"ItemInstanceArray")),(0,r.kt)("td",{parentName:"tr",align:null},"Array of three or four elements representing item ID, count, data and extra respectively. Uses in block drop functions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/jbyte"},"jbyte")),(0,r.kt)("td",{parentName:"tr",align:null},"Type used to mark Java bytes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Nullable"},"Nullable")),(0,r.kt)("td",{parentName:"tr",align:null},"Most methods must return ",(0,r.kt)("code",null,"null")," if value is not presented.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/TransferPolicy"},"TransferPolicy")),(0,r.kt)("td",{parentName:"tr",align:null},"Backwards compatibility.")))))}k.isMDXComponent=!0}}]);