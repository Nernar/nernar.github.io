"use strict";(self.webpackChunkinnercore_docs=self.webpackChunkinnercore_docs||[]).push([[31237],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>m});var l=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,l)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,l,n=function(t,e){if(null==t)return{};var a,l,n={},r=Object.keys(t);for(l=0;l<r.length;l++)a=r[l],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)a=r[l],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var o=l.createContext({}),k=function(t){var e=l.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=k(t.components);return l.createElement(o.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},u=l.forwardRef((function(t,e){var a=t.components,n=t.mdxType,r=t.originalType,o=t.parentName,d=p(t,["components","mdxType","originalType","parentName"]),u=k(a),m=n,s=u["".concat(o,".").concat(m)]||u[m]||c[m]||r;return a?l.createElement(s,i(i({ref:e},d),{},{components:a})):l.createElement(s,i({ref:e},d))}));function m(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var r=a.length,i=new Array(r);i[0]=u;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p.mdxType="string"==typeof t?t:n,i[1]=p;for(var k=2;k<r;k++)i[k]=a[k];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3498:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>k,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var l=a(87462),n=(a(67294),a(3905)),r=a(95999);const i={title:"Block.SpecialType",sidebar_label:"SpecialType",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},p=void 0,o={unversionedId:"Block/SpecialType/index",id:"Block/SpecialType/index",title:"Block.SpecialType",description:"",source:"@site/api/www/Block/SpecialType/index.mdx",sourceDirName:"Block/SpecialType",slug:"/Block/SpecialType/",permalink:"/ru/api/Block/SpecialType/",draft:!1,tags:[],version:"current",frontMatter:{title:"Block.SpecialType",sidebar_label:"SpecialType",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},sidebar:"defaultSidebar"},k={},d=[],c={toc:d};function u(t){let{components:e,...a}=t;return(0,n.kt)("wrapper",(0,l.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h2",null,(0,n.kt)(r.Z,{id:"api.heading.interface",values:{scopedName:"Block.SpecialType"},mdxType:"Translate"},"{scopedName} interface")),(0,n.kt)("p",null,"Special types are used to set properties to the block. Unlike items, blocks properties are defined using special types, due to old Inner Core's block IDs limitations."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SpecialType \n")),(0,n.kt)("h3",null,(0,n.kt)(r.Z,{id:"api.section.properties",mdxType:"Translate"},"Properties")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(r.Z,{id:"api.block.property",mdxType:"Translate"},"Property")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(r.Z,{id:"api.block.modifiers",mdxType:"Translate"},"Modifiers")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(r.Z,{id:"api.block.type",mdxType:"Translate"},"Type")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(r.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/base"},"base?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Vanilla block ID to inherit some of the properties.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/can_be_extra_block"},"can","_","be","_","extra","_","block?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"boolean"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Whether or not block may overlay different block, like water overlapping fillable blocks.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/can_contain_liquid"},"can","_","contain","_","liquid?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"boolean"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Whether or not block may filled by water bucket or other custom fillable liquids.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/color_source"},"color","_","source?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/ColorSource"},"ColorSource")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Makes block use biome color source when displayed on the vanilla maps.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/destroytime"},"destroytime?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Specifies the time required to destroy the block, in ticks.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/explosionres"},"explosionres?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Specifies how block resists to the explosions.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/friction"},"friction?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Specifies how player walks on this block. The higher the friction is, the more difficult it is to change speed and direction.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/lightlevel"},"lightlevel?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," If non-zero value is used, the block emits light of that value. Default is no lighting, use values from 1 to 15 to set light level.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/lightopacity"},"lightopacity?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Specifies how opaque the block is. Default is transparent, use values from 1 to 15 to make the block opaque.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/mapcolor"},"mapcolor?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Block color when displayed on the vanilla maps.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/material"},"material?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Block material constant to be inherited.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/name"},"name?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"string"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Unique string identifier of the SpecialType.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/renderallfaces"},"renderallfaces?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"boolean"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," If ",(0,n.kt)("code",null,"true"),", all block faces are rendered, otherwise back faces are not rendered, like for glass.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/renderlayer"},"renderlayer?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Specifies the layer that is used to render the block.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/rendertype"},"rendertype?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Sets render type of the block. Default is full block, use other values to change block's shape.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/solid"},"solid?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"boolean"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," If ",(0,n.kt)("code",null,"true"),", the block is not transparent.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/sound"},"sound?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/Sound"},"Sound")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," Specifies sounds of the block, one of ",(0,n.kt)("a",{parentName:"td",href:"/api/Block/Sound"},"Block.Sound"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/Block/SpecialType/translucency"},"translucency?")),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"number"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("i",null,(0,n.kt)(r.Z,{id:"api.block.optional",mdxType:"Translate"},"(optional)"))," If non-zero value is used, the shadows will be rendered on the block. Default is zero, allows float values from 0 to 1.")))))}u.isMDXComponent=!0}}]);