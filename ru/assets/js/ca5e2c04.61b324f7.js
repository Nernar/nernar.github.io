"use strict";(self.webpackChunkinnercore_docs=self.webpackChunkinnercore_docs||[]).push([[79361],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>s});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(a),s=r,k=m["".concat(d,".").concat(s)]||m[s]||u[s]||o;return a?n.createElement(k,l(l({ref:t},c),{},{components:a})):n.createElement(k,l({ref:t},c))}));function s(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},14734:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var n=a(87462),r=(a(67294),a(3905)),o=a(95999);const l={title:"ModAPI",sidebar_label:"ModAPI",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},i=void 0,d={unversionedId:"ModAPI/index",id:"ModAPI/index",title:"ModAPI",description:"",source:"@site/api/www/ModAPI/index.mdx",sourceDirName:"ModAPI",slug:"/ModAPI/",permalink:"/ru/api/ModAPI/",draft:!1,tags:[],version:"current",frontMatter:{title:"ModAPI",sidebar_label:"ModAPI",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},sidebar:"defaultSidebar"},p={},c=[],u={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,(0,r.kt)(o.Z,{id:"api.heading.namespace",values:{scopedName:"ModAPI"},mdxType:"Translate"},"{scopedName} namespace")),(0,r.kt)("p",null,"Module used to share mods' APIs"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(o.Z,{id:"api.section.signature",mdxType:"Translate"},"Signature"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export namespace ModAPI \n")),(0,r.kt)("h3",null,(0,r.kt)(o.Z,{id:"api.section.functions",mdxType:"Translate"},"Functions")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(o.Z,{id:"api.block.function",mdxType:"Translate"},"Function")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(o.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/addAPICallback"},"addAPICallback(apiName, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds callback for the specified mod API")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/addModCallback"},"addModCallback(modName, func)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/addTexturePack"},"addTexturePack(path)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/cloneAPI"},"cloneAPI(api, deep)")),(0,r.kt)("td",{parentName:"tr",align:null},"Recursively copies (duplicates) the object to the new one")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/cloneObject"},"cloneObject(source, deep, rec)")),(0,r.kt)("td",{parentName:"tr",align:null},"Recursively clones object to the new one counting call depth and interrupting copying after 7th recursion call")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/debugCloneObject"},"debugCloneObject(source, deep, rec)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/getModByName"},"getModByName(modName)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/getModList"},"getModList()")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/getModPEList"},"getModPEList()")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/inheritPrototypes"},"inheritPrototypes(source, target)")),(0,r.kt)("td",{parentName:"tr",align:null},"Ensures target object has all the properties the source object has, if not, copies them from source to target object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/isModLoaded"},"isModLoaded(modName)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/registerAPI"},"registerAPI(name, api, descr)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registers new API for the mod and invokes mod API callback")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/requireAPI"},"requireAPI(name)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("p",null,"Gets API by its name. The best approach is to call this method in the function passed as the second parameter of ","[","[","ModAPI.addAPICallback","]","]","."),(0,r.kt)("p",null,"Example:"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// importing API registered by IndustrialCraft PE\nvar ICore;\nModAPI.addAPICallback("ICore", function(api){\n    ICore = api;\n});\n')),(0,r.kt)("p",null,"When using ICore variable from the example, be sure to check it for null because Industrial Craft PE may not be installed on the user's phone")," | |  [requireAPIdoc(name)](/api/ModAPI/requireAPIdoc) |  | |  [requireAPIPropertyDoc(name, prop)](/api/ModAPI/requireAPIPropertyDoc) | Fetches information about the method or property of mod API | |  [requireGlobal(name)](/api/ModAPI/requireGlobal) | Executes string in Core Engine's global context. Can be used to get functions and objects directly from AdaptedScriptAPI. |",(0,r.kt)("h3",null,(0,r.kt)(o.Z,{id:"api.section.interfaces",mdxType:"Translate"},"Interfaces")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(o.Z,{id:"api.block.interface",mdxType:"Translate"},"Interface")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(o.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/ModAPI/ModDocumentation"},"ModDocumentation")),(0,r.kt)("td",{parentName:"tr",align:null},"Objects used to represent mod API documentation")))))}m.isMDXComponent=!0}}]);