"use strict";(self.webpackChunkinnercore_docs=self.webpackChunkinnercore_docs||[]).push([[68596],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},73448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905)),a=n(95999);const i={title:"Dimensions.NoiseConversion",sidebar_label:"NoiseConversion",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},s=void 0,l={unversionedId:"Dimensions/NoiseConversion/index",id:"Dimensions/NoiseConversion/index",title:"Dimensions.NoiseConversion",description:"",source:"@site/api/www/Dimensions/NoiseConversion/index.mdx",sourceDirName:"Dimensions/NoiseConversion",slug:"/Dimensions/NoiseConversion/",permalink:"/ru/api/Dimensions/NoiseConversion/",draft:!1,tags:[],version:"current",frontMatter:{title:"Dimensions.NoiseConversion",sidebar_label:"NoiseConversion",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},sidebar:"defaultSidebar"},p={},c=[],d={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",null,(0,o.kt)(a.Z,{id:"api.heading.class",values:{scopedName:"Dimensions.NoiseConversion"},mdxType:"Translate"},"{scopedName} class")),(0,o.kt)("p",null,'Class representing noise conversion function. Used to define "density" of the landscape at a given height. Values between nodes are interpolated linearly.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class NoiseConversion \n")),(0,o.kt)("h3",null,(0,o.kt)(a.Z,{id:"api.section.constructors",mdxType:"Translate"},"Constructors")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)(a.Z,{id:"api.block.constructor",mdxType:"Translate"},"Constructor")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)(a.Z,{id:"api.block.modifiers",mdxType:"Translate"},"Modifiers")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)(a.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/api/Dimensions/NoiseConversion/_constructor_"},"(constructor)()")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Constructs a new instance of the ",(0,o.kt)("code",null,"NoiseConversion")," class")))),(0,o.kt)("h3",null,(0,o.kt)(a.Z,{id:"api.section.methods",mdxType:"Translate"},"Methods")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)(a.Z,{id:"api.block.method",mdxType:"Translate"},"Method")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)(a.Z,{id:"api.block.modifiers",mdxType:"Translate"},"Modifiers")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)(a.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/api/Dimensions/NoiseConversion/addNode"},"addNode(x, y)")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Adds a new node to the noise conversion function.")))))}u.isMDXComponent=!0}}]);