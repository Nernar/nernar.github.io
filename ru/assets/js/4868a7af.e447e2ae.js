"use strict";(self.webpackChunkinnercore_docs=self.webpackChunkinnercore_docs||[]).push([[25901],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return a?r.createElement(f,o(o({ref:t},c),{},{components:a})):r.createElement(f,o({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},29603:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=a(87462),n=(a(67294),a(3905)),i=a(95999);const o={title:"NBT",sidebar_label:"NBT",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},l=void 0,p={unversionedId:"NBT/index",id:"NBT/index",title:"NBT",description:"",source:"@site/api/www/NBT/index.mdx",sourceDirName:"NBT",slug:"/NBT/",permalink:"/ru/api/NBT/",draft:!1,tags:[],version:"current",frontMatter:{title:"NBT",sidebar_label:"NBT",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},sidebar:"defaultSidebar"},s={},c=[],u={toc:c};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",null,(0,n.kt)(i.Z,{id:"api.heading.namespace",values:{scopedName:"NBT"},mdxType:"Translate"},"{scopedName} namespace")),(0,n.kt)("p",null,"NBT (Named Binary Tag) is a tag based binary format designed to carry large amounts of binary data with smaller amounts of additional data. You can get or set nbt tags of ","[","[","Entity","]","]"," (entities), ","[","[","NativeTileEntity","]","]"," (native tile entities, such as chests or beacons) and ","[","[","ItemExtraData","]","]"," (items). To get more information about these data structures, see ","[","this page","]","(",(0,n.kt)("a",{parentName:"p",href:"http://web.archive.org/web/20110723210920/http://www.minecraft.net/docs/NBT.txt"},"http://web.archive.org/web/20110723210920/http://www.minecraft.net/docs/NBT.txt"),")"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)(i.Z,{id:"api.section.signature",mdxType:"Translate"},"Signature"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export namespace NBT \n")),(0,n.kt)("h3",null,(0,n.kt)(i.Z,{id:"api.section.classes",mdxType:"Translate"},"Classes")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(i.Z,{id:"api.block.class",mdxType:"Translate"},"Class")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(i.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/NBT/CompoundTag"},"CompoundTag")),(0,n.kt)("td",{parentName:"tr",align:null},"List tags represent NBT map-like data structure (key-value pairs). Its values may be of any type, so check the type before calling the appropriate getter")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/NBT/ListTag"},"ListTag")),(0,n.kt)("td",{parentName:"tr",align:null},"List tags represent NBT array-like indexed data structure. Its values may be of any type, so check the type before calling the appropriate getter")))))}d.isMDXComponent=!0}}]);