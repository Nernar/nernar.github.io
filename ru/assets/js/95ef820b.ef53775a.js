"use strict";(self.webpackChunkinnercore_docs=self.webpackChunkinnercore_docs||[]).push([[21980],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>s});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),k=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},c=function(t){var e=k(t.components);return n.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),m=k(a),s=r,u=m["".concat(p,".").concat(s)]||m[s]||d[s]||l;return a?n.createElement(u,i(i({ref:e},c),{},{components:a})):n.createElement(u,i({ref:e},c))}));function s(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var k=2;k<l;k++)i[k]=a[k];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},40844:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>k,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var n=a(87462),r=(a(67294),a(3905)),l=a(95999);const i={title:"Block",sidebar_label:"Block",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},o=void 0,p={unversionedId:"Block/index",id:"Block/index",title:"Block",description:"",source:"@site/api/www/Block/index.mdx",sourceDirName:"Block",slug:"/Block/",permalink:"/ru/api/Block/",draft:!1,tags:[],version:"current",frontMatter:{title:"Block",sidebar_label:"Block",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},sidebar:"defaultSidebar"},k={},c=[],d={toc:c};function m(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,(0,r.kt)(l.Z,{id:"api.heading.namespace",values:{scopedName:"Block"},mdxType:"Translate"},"{scopedName} namespace")),(0,r.kt)("p",null,'Module used to create and manipulate blocks. The difference between terms "block" and "tile" is in it\'s usage: blocks are used in the inventory, tiles are placed in the world and have different IDs for some vanilla blocks. Use ',(0,r.kt)("a",{parentName:"p",href:"/api/Block/convertBlockToItemId"},"Block.convertBlockToItemId()")," and ",(0,r.kt)("a",{parentName:"p",href:"/api/Block/convertItemToBlockId"},"Block.convertItemToBlockId()")," to perform conversion between block and it item variation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export namespace Block \n")),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.functions",mdxType:"Translate"},"Functions")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.function",mdxType:"Translate"},"Function")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/canBeExtraBlock"},"canBeExtraBlock(id)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/canContainLiquid"},"canContainLiquid(id)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/convertBlockToItemId"},"convertBlockToItemId(id)")),(0,r.kt)("td",{parentName:"tr",align:null},"Converts tile ID to the block ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/convertItemToBlockId"},"convertItemToBlockId(id)")),(0,r.kt)("td",{parentName:"tr",align:null},"Converts block ID to the tile ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/createBlock"},"createBlock(nameID, defineData, blockType)")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates new block using specified params.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/createBlockWithRotation"},"createBlockWithRotation(nameID, defineData, blockType)")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates new block using specified params, creating four variations for each of the specified variations to be able to place it facing flayer with the front side and defines the appropriate behavior. Useful for different machines and mechanisms.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/createLiquidBlock"},"createLiquidBlock(nameID, defineData, blockType)")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates new liquid block using specified params.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/createSpecialType"},"createSpecialType(description, nameKey)")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates a new special type using specified params and registers it by name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getBlockAtlasTextureCoords"},"getBlockAtlasTextureCoords(str, int)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getBlockDropViaItem"},"getBlockDropViaItem(block, item, coords, region)")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets drop for the specified block. Used mostly by Core Engine's ",(0,r.kt)("a",{parentName:"td",href:"/api/ToolAPI"},"ToolAPI"),", though, can be useful in the mods, too.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getDestroyTime"},"getDestroyTime(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getDropFunction"},"getDropFunction(id)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getExplosionResistance"},"getExplosionResistance(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getFriction"},"getFriction(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getLightLevel"},"getLightLevel(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getLightOpacity"},"getLightOpacity(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getMapColor"},"getMapColor(id)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getMaterial"},"getMaterial(id)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getNumericId"},"getNumericId(id)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getPlaceFunc"},"getPlaceFunc(id)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getRenderLayer"},"getRenderLayer(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getRenderType"},"getRenderType(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/getTranslucency"},"getTranslucency(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/isNativeTile"},"isNativeTile(id)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/isSolid"},"isSolid(numericID)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerClickFunction"},"registerClickFunction(nameId, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines custom behavior when the player clicks on the block with definite ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerClickFunctionForID"},"registerClickFunctionForID(id, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerClickFunction"},"Block.registerClickFunction()"),", but only numeric block ID can be passed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerDropFunction"},"registerDropFunction(nameID, dropFunc, level)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registers function used by Core Engine to determine block drop for the specified block ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerDropFunctionForID"},"registerDropFunctionForID(numericID, dropFunc, level)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerDropFunction"},"Block.registerDropFunction()")," but accepts only numeric tile ID as the first param.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerEntityInsideFunction"},"registerEntityInsideFunction(nameID, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registers function on entity being inside the block. Can be used to create portals.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerEntityInsideFunctionForID"},"registerEntityInsideFunctionForID(numericID, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerEntityInsideFunction"},"Block.registerEntityInsideFunction()")," but accepts only numeric tile ID as the first param.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerEntityStepOnFunction"},"registerEntityStepOnFunction(numericID, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registers function on entity step on the block.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerEntityStepOnFunctionForID"},"registerEntityStepOnFunctionForID(id, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerEntityStepOnFunction"},"Block.registerEntityStepOnFunction()")," but accepts only numeric tile ID as the first param.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerNeighbourChangeFunction"},"registerNeighbourChangeFunction(nameID, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registers function on neighbour blocks updates.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerNeighbourChangeFunctionForID"},"registerNeighbourChangeFunctionForID(id, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerNeighbourChangeFunction"},"Block.registerNeighbourChangeFunction()")," but accepts only numeric tile ID as the first param.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerPlaceFunction"},"registerPlaceFunction(nameID, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registers function to be called when the block is placed in the world.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerPlaceFunctionForID"},"registerPlaceFunctionForID(block, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerPlaceFunction"},"Block.registerPlaceFunction()")," but accepts only numeric tile ID as the first param.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerPopResourcesFunction"},"registerPopResourcesFunction(nameID, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registered function used by Core Engine to determine block drop for the specified block ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerPopResourcesFunctionForID"},"registerPopResourcesFunctionForID(numericID, func)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/registerPopResourcesFunction"},"Block.registerPopResourcesFunction()")," but accepts only numeric tile ID as the first param.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setAnimateTickCallback"},"setAnimateTickCallback(id, callback)")),(0,r.kt)("td",{parentName:"tr",align:null},"Makes block invoke callback randomly depending on game speed. Occurs more often then ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/setRandomTickCallback"},"Block.setRandomTickCallback()")," and only if the block is not far away from player.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setBlockChangeCallbackEnabled"},"setBlockChangeCallbackEnabled(id, enabled)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setBlockMaterial"},"setBlockMaterial(nameID, material, level)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registers material and digging level for the specified block.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setBlockShape"},"setBlockShape(id, pos1, pos2, data)")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets block box shape.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setDestroyLevel"},"setDestroyLevel(nameID, level, resetData)")),(0,r.kt)("td",{parentName:"tr",align:null},"Registers a default destroy function for the specified block, considering it's digging level.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setDestroyLevelForID"},"setDestroyLevelForID(id, level, resetData)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/setDestroyLevel"},"Block.setDestroyLevel()")," but accepts only numeric tile ID as the first param.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setDestroyTime"},"setDestroyTime(nameID, time)")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets destroy time for the block with specified ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setEntityInsideCallbackEnabled"},"setEntityInsideCallbackEnabled(id, enabled)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setEntityStepOnCallbackEnabled"},"setEntityStepOnCallbackEnabled(id, enabled)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setNeighbourChangeCallbackEnabled"},"setNeighbourChangeCallbackEnabled(id, enabled)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setPrototype"},"setPrototype(nameID, Prototype)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setRandomTickCallback"},"setRandomTickCallback(id, callback)")),(0,r.kt)("td",{parentName:"tr",align:null},"Makes block invoke callback randomly depending on game speed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setRedstoneConnector"},"setRedstoneConnector(id, data, redstone)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setRedstoneEmitter"},"setRedstoneEmitter(id, data, redstone)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setRedstoneTile"},"setRedstoneTile(nameID, data, isRedstone)")),(0,r.kt)("td",{parentName:"tr",align:null},"Makes block accept redstone signal.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setShape"},"setShape(id, x1, y1, z1, x2, y2, z2, data)")),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("a",{parentName:"td",href:"/api/Block/setBlockShape"},"Block.setBlockShape()"),", but accepts coordinates as scalar params, not objects.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setTempDestroyTime"},"setTempDestroyTime(numericID, time)")),(0,r.kt)("td",{parentName:"tr",align:null},"Temporarily sets destroy time for block, saving the old value for the further usage.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setupAsNonRedstoneTile"},"setupAsNonRedstoneTile(nameID)")),(0,r.kt)("td",{parentName:"tr",align:null},"Removes all the redstone functionality from the block.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setupAsRedstoneEmitter"},"setupAsRedstoneEmitter(nameID, connectToRedstone)")),(0,r.kt)("td",{parentName:"tr",align:null},"Makes block emit redstone signal.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/setupAsRedstoneReceiver"},"setupAsRedstoneReceiver(nameID, connectToRedstone)")),(0,r.kt)("td",{parentName:"tr",align:null},'Makes block receive redstone signals via "RedstoneSignal" callback.')))),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.interfaces",mdxType:"Translate"},"Interfaces")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.interface",mdxType:"Translate"},"Interface")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/AnimateTickFunction"},"AnimateTickFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"Function used to track random block animation ticks.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/BlockAtlasTextureCoords"},"BlockAtlasTextureCoords")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/BlockVariation"},"BlockVariation")),(0,r.kt)("td",{parentName:"tr",align:null},"Object used to represent single block variation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/ClickFunction"},"ClickFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"Function used to define how the block will behave when the player clicks on it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/DropFunction"},"DropFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"Function used to determine block drop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/EntityInsideFunction"},"EntityInsideFunction")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/EntityStepOnFunction"},"EntityStepOnFunction")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/LiquidDescriptor"},"LiquidDescriptor")),(0,r.kt)("td",{parentName:"tr",align:null},"Object to specify needed params for custom liquid block.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/NeighbourChangeFunction"},"NeighbourChangeFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"Function used to check block's neighbours changes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/PlaceFunction"},"PlaceFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"Function used to determine when block is placed in the world.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/PopResourcesFunction"},"PopResourcesFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"Function used to determine when block is broken by environment (explosions, pistons, etc.).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/RandomTickFunction"},"RandomTickFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"Function used to track random block ticks.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/SpecialType"},"SpecialType")),(0,r.kt)("td",{parentName:"tr",align:null},"Special types are used to set properties to the block. Unlike items, blocks properties are defined using special types, due to old Inner Core's block IDs limitations.")))),(0,r.kt)("h3",null,(0,r.kt)(l.Z,{id:"api.section.typeAliases",mdxType:"Translate"},"Type Aliases")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.typeAlias",mdxType:"Translate"},"Type Alias")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/ColorSource"},"ColorSource")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/api/Block/Sound"},"Sound")),(0,r.kt)("td",{parentName:"tr",align:null})))))}m.isMDXComponent=!0}}]);