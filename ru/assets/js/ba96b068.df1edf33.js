"use strict";(self.webpackChunkinnercore_docs=self.webpackChunkinnercore_docs||[]).push([[42300],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),p=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),k=p(a),m=n,u=k["".concat(d,".").concat(m)]||k[m]||c[m]||l;return a?r.createElement(u,o(o({ref:t},s),{},{components:a})):r.createElement(u,o({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=k;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},17115:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var r=a(87462),n=(a(67294),a(3905)),l=a(95999);const o={title:"World",sidebar_label:"World",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},i=void 0,d={unversionedId:"World/index",id:"World/index",title:"World",description:"",source:"@site/api/www/World/index.mdx",sourceDirName:"World",slug:"/World/",permalink:"/ru/api/World/",draft:!1,tags:[],version:"current",frontMatter:{title:"World",sidebar_label:"World",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},sidebar:"defaultSidebar"},p={},s=[],c={toc:s};function k(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",null,(0,n.kt)(l.Z,{id:"api.heading.namespace",values:{scopedName:"World"},mdxType:"Translate"},"{scopedName} namespace")),(0,n.kt)("p",null,"Module that allows to work with current Minecraft world Most of the methods are out of date in multiplayer, use BlockSource instead"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)(l.Z,{id:"api.section.signature",mdxType:"Translate"},"Signature"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export namespace World \n")),(0,n.kt)("h3",null,(0,n.kt)(l.Z,{id:"api.section.functions",mdxType:"Translate"},"Functions")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(l.Z,{id:"api.block.function",mdxType:"Translate"},"Function")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/addGenerationCallback"},"addGenerationCallback(callbackName, callback, uniqueHashStr)")),(0,n.kt)("td",{parentName:"tr",align:null},"Adds a new generation callback using string hash to generate a unique random seed for the chunk generator")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/addTileEntity"},"addTileEntity(x, y, z, region)")),(0,n.kt)("td",{parentName:"tr",align:null},"If the block on the specified coordinates is a TileEntity block and is not initialized, initializes it and returns created ","[","[","TileEntity","]","]"," object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/canSeeSky"},"canSeeSky(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/canTileBeReplaced"},"canTileBeReplaced(id, data)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/destroyBlock"},"destroyBlock(x, y, z, drop)")),(0,n.kt)("td",{parentName:"tr",align:null},"Destroys block on the specified coordinates producing appropriate drop and particles. Do not use for massive tasks due to particles being produced")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/drop"},"drop(x, y, z, id, count, data, extra)")),(0,n.kt)("td",{parentName:"tr",align:null},"Drops item or block with specified id, count, data and extra on the specified coordinates. For blocks, be sure to use block id, not the tile id")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/explode"},"explode(x, y, z, power, fire)")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates an explosion on the specified coordinates")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBiome"},"getBiome(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBiomeMap"},"getBiomeMap(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets biome on the specified coordinates when generating biome map. Should be called only in ","*","GenerateBiomeMap","*"," callback")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBiomeName"},"getBiomeName(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBlock"},"getBlock(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBlockData"},"getBlockData(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBlockID"},"getBlockID(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getContainer"},"getContainer(x, y, z, region)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getGrassColor"},"getGrassColor(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getGrassColorRGB"},"getGrassColorRGB(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getInverseBlockSide"},"getInverseBlockSide(side)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getLightLevel"},"getLightLevel(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getRelativeCoords"},"getRelativeCoords(x, y, z, side)")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("p",null,"Retrieves coordinates relative to the block. For example, the following code will return coordinates of the block above the specified:"))))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"World.getRelativeCoords(x, y, z, Native.BlockSide.UP);\n")),(0,n.kt)("p",null," |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/getThreadTime"},"getThreadTime()")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/getTileEntity"},"getTileEntity(x, y, z, region)")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/getVectorByBlockSide"},"getVectorByBlockSide(side)")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/getWeather"},"getWeather()")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/getWorldTime"},"getWorldTime()")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/isChunkLoaded"},"isChunkLoaded(x, z)")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/isChunkLoadedAt"},"isChunkLoadedAt(x, y, z)")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/isWorldLoaded"},"isWorldLoaded()")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/nativeGetBlockData"},"nativeGetBlockData(x, y, z)")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/nativeGetBlockID"},"nativeGetBlockID(x, y, z)")," |  |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/nativeSetBlock"},"nativeSetBlock(x, y, z, id, data)")," | Sets block in the world using its tile id and data |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/playSound"},"playSound(x, y, z, name, volume, pitch)")," | Plays standart Minecraft sound on the specified coordinates |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/playSoundAtEntity"},"playSoundAtEntity(entity, name, volume, pitch)")," | Plays standart Minecraft sound from the specified entity |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/registerBlockChangeCallback"},"registerBlockChangeCallback(ids, callback)"),' | Enables "BlockChanged" event for specified block ids and registers callback function for the ids |\n|  ',(0,n.kt)("a",{parentName:"p",href:"/api/World/removeTileEntity"},"removeTileEntity(x, y, z, region)")," | If the block on the specified coordinates is a ","[","[","TileEntity","]","]",", destroys it, dropping its container |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setBiomeMap"},"setBiomeMap(x, z, id)")," | Sets biome on the specified coordinates when generating biome map. Should be called only in ","*","GenerateBiomeMap","*"," callback |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setBlock"},"setBlock(x, y, z, id, data)")," | Sets block in the world using its tile id and data |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setBlockChangeCallbackEnabled"},"setBlockChangeCallbackEnabled(id, enabled)"),' | Enables "BlockChanged" event for the block id. Event occurs when either old block or new block is registered using this method |\n|  ',(0,n.kt)("a",{parentName:"p",href:"/api/World/setDayMode"},"setDayMode(day)")," | Sets current time to day or night |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setFullBlock"},"setFullBlock(x, y, z, fullTile)")," | Sets block in the world using specified ","[","[","Tile","]","]"," object |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setGrassColor"},"setGrassColor(x, z, color)")," | Sets grass color on the specified coordinates, uses android integer color model |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setGrassColorRGB"},"setGrassColorRGB(x, z, rgb)")," | Sets grass color on the specified coordinates, uses rgb color model |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setLoaded"},"setLoaded(isLoaded)")," | Setups the module to work properly with the world. Usually called by Core Engine, so you generally shouldn't call it yourself |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setNightMode"},"setNightMode(night)")," | Sets current time to day or night |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setWeather"},"setWeather(weather)")," | Sets current weather in the world |\n|  ",(0,n.kt)("a",{parentName:"p",href:"/api/World/setWorldTime"},"setWorldTime(time)")," | Sets current world time |"))}k.isMDXComponent=!0}}]);