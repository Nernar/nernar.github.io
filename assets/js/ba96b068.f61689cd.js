"use strict";(self.webpackChunkinnercore_docs=self.webpackChunkinnercore_docs||[]).push([[42300],{3905:(t,e,a)=>{a.d(e,{Zo:()=>k,kt:()=>c});var r=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function d(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var i=r.createContext({}),p=function(t){var e=r.useContext(i),a=e;return t&&(a="function"==typeof t?t(e):d(d({},e),t)),a},k=function(t){var e=p(t.components);return r.createElement(i.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,i=t.parentName,k=o(t,["components","mdxType","originalType","parentName"]),s=p(a),c=n,u=s["".concat(i,".").concat(c)]||s[c]||m[c]||l;return a?r.createElement(u,d(d({ref:e},k),{},{components:a})):r.createElement(u,d({ref:e},k))}));function c(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,d=new Array(l);d[0]=s;var o={};for(var i in e)hasOwnProperty.call(e,i)&&(o[i]=e[i]);o.originalType=t,o.mdxType="string"==typeof t?t:n,d[1]=o;for(var p=2;p<l;p++)d[p]=a[p];return r.createElement.apply(null,d)}return r.createElement.apply(null,a)}s.displayName="MDXCreateElement"},17115:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>d,metadata:()=>i,toc:()=>k});var r=a(87462),n=(a(67294),a(3905)),l=a(95999);const d={title:"World",sidebar_label:"World",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},o=void 0,i={unversionedId:"World/index",id:"World/index",title:"World",description:"",source:"@site/api/www/World/index.mdx",sourceDirName:"World",slug:"/World/",permalink:"/api/World/",draft:!1,tags:[],version:"current",frontMatter:{title:"World",sidebar_label:"World",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null,hide_title:!0},sidebar:"defaultSidebar"},p={},k=[],m={toc:k};function s(t){let{components:e,...a}=t;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h2",null,(0,n.kt)(l.Z,{id:"api.heading.namespace",values:{scopedName:"World"},mdxType:"Translate"},"{scopedName} namespace")),(0,n.kt)("p",null,"Module that allows to work with current Minecraft world. Most of the methods are client, use BlockSource instead."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export namespace World \n")),(0,n.kt)("h3",null,(0,n.kt)(l.Z,{id:"api.section.functions",mdxType:"Translate"},"Functions")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(l.Z,{id:"api.block.function",mdxType:"Translate"},"Function")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)(l.Z,{id:"api.block.description",mdxType:"Translate"},"Description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/addGenerationCallback"},"addGenerationCallback(callbackName, callback, uniqueHashStr)")),(0,n.kt)("td",{parentName:"tr",align:null},"Adds a new generation callback using string hash to generate a unique random seed for the chunk generator.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/addTileEntity"},"addTileEntity(x, y, z, region)")),(0,n.kt)("td",{parentName:"tr",align:null},"If the block on the specified coordinates is a TileEntity block and is not initialized, initializes it and returns created  object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/canSeeSky"},"canSeeSky(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/canTileBeReplaced"},"canTileBeReplaced(id, data)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/clip"},"clip(x1, y1, z1, x2, y2, z2, mode)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/destroyBlock"},"destroyBlock(x, y, z, drop)")),(0,n.kt)("td",{parentName:"tr",align:null},"Destroys block on the specified coordinates producing appropriate drop and particles. Do not use for massive tasks due to particles being produced.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/doesVanillaTileHasUI"},"doesVanillaTileHasUI(id)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/drop"},"drop(x, y, z, id, count, data, extra)")),(0,n.kt)("td",{parentName:"tr",align:null},"Drops item or block with specified ID, count, data and extra on the specified coordinates. For blocks, be sure to use block ID, not the tile ID.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/explode"},"explode(x, y, z, power, fire)")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates an explosion on the specified coordinates.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBiome"},"getBiome(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBiomeMap"},"getBiomeMap(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null},"Gets biome on the specified coordinates when generating biome map. Should be called only in ","*","GenerateBiomeMap","*"," callback.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBiomeName"},"getBiomeName(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBlock"},"getBlock(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBlockData"},"getBlockData(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getBlockID"},"getBlockID(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getContainer"},"getContainer(x, y, z, region)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getGrassColor"},"getGrassColor(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getGrassColorRGB"},"getGrassColorRGB(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getInverseBlockSide"},"getInverseBlockSide(side)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getLightLevel"},"getLightLevel(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getRelativeCoords"},"getRelativeCoords(x, y, z, side)")),(0,n.kt)("td",{parentName:"tr",align:null},"Retrieves coordinates relative to the block.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getThreadTime"},"getThreadTime()")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getTileEntity"},"getTileEntity(x, y, z, region)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getVectorByBlockSide"},"getVectorByBlockSide(side)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getWeather"},"getWeather()")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/getWorldTime"},"getWorldTime()")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/isChunkLoaded"},"isChunkLoaded(x, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/isChunkLoadedAt"},"isChunkLoadedAt(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/isWorldLoaded"},"isWorldLoaded()")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/nativeGetBlockData"},"nativeGetBlockData(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/nativeGetBlockID"},"nativeGetBlockID(x, y, z)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/nativeSetBlock"},"nativeSetBlock(x, y, z, id, data)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets block in the world using it's tile ID and data.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/playSound"},"playSound(x, y, z, name, volume, pitch)")),(0,n.kt)("td",{parentName:"tr",align:null},"Plays standart Minecraft sound on the specified coordinates.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/playSoundAtEntity"},"playSoundAtEntity(entity, name, volume, pitch)")),(0,n.kt)("td",{parentName:"tr",align:null},"Plays standart Minecraft sound from the specified entity.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/registerBlockChangeCallback"},"registerBlockChangeCallback(ids, callback)")),(0,n.kt)("td",{parentName:"tr",align:null},'Enables "BlockChanged" event for specified block IDs and registers callback function for the IDs.')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/removeTileEntity"},"removeTileEntity(x, y, z, region)")),(0,n.kt)("td",{parentName:"tr",align:null},"If the block on the specified coordinates is a , destroys it, dropping it's container.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setBiomeMap"},"setBiomeMap(x, z, id)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets biome on the specified coordinates when generating biome map. Should be called only in ","*","GenerateBiomeMap","*"," callback.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setBlock"},"setBlock(x, y, z, id, data)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets block in the world using it's tile ID and data.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setBlockChangeCallbackEnabled"},"setBlockChangeCallbackEnabled(id, enabled)")),(0,n.kt)("td",{parentName:"tr",align:null},'Enables "BlockChanged" event for the block ID. Event occurs when either old block or new block is registered using this method.')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setBlockUpdateAllowed"},"setBlockUpdateAllowed(allowed)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setBlockUpdateType"},"setBlockUpdateType(type)")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setDayMode"},"setDayMode(day)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets current time to day or night.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setFullBlock"},"setFullBlock(x, y, z, fullTile)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets block in the world using specified ",(0,n.kt)("a",{parentName:"td",href:"/api/Tile"},"Tile")," object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setGrassColor"},"setGrassColor(x, z, color)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets grass color on the specified coordinates, uses android-like integer color model.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setGrassColorRGB"},"setGrassColorRGB(x, z, rgb)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets grass color on the specified coordinates, uses rgb color model.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setNightMode"},"setNightMode(night)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets current time to day or night.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setWeather"},"setWeather(weather)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets current weather in the world.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/api/World/setWorldTime"},"setWorldTime(time)")),(0,n.kt)("td",{parentName:"tr",align:null},"Sets current world time, does actually nothing useful to game itself, changes thread time.")))))}s.isMDXComponent=!0}}]);